// <auto-generated />
using System;
using Merp.Registry.QueryStack;
using Merp.Registry.QueryStack.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Merp.Registry.QueryStack.Migrations
{
    [DbContext(typeof(RegistryDbContext))]
    [Migration("20200417171017_PartyPattern")]
    partial class PartyPattern
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Merp.Registry.QueryStack.Model.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstantMessaging")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("Unlisted")
                        .HasColumnType("bit");

                    b.Property<string>("VatIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName");

                    b.HasIndex("OriginalId");

                    b.ToTable("Parties");

                    b.HasDiscriminator<int>("Type").HasValue(2);
                });

            modelBuilder.Entity("Merp.Registry.QueryStack.Model.Company", b =>
                {
                    b.HasBaseType("Merp.Registry.QueryStack.Model.Party");

                    b.Property<string>("AdministrativeContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdministrativeContactUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MainContactUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Merp.Registry.QueryStack.Model.Person", b =>
                {
                    b.HasBaseType("Merp.Registry.QueryStack.Model.Party");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Merp.Registry.QueryStack.Model.Party", b =>
                {
                    b.OwnsOne("Merp.Registry.QueryStack.Model.PostalAddress", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("PartyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PartyId");

                            b1.ToTable("Parties");

                            b1.WithOwner()
                                .HasForeignKey("PartyId");
                        });

                    b.OwnsOne("Merp.Registry.QueryStack.Model.PostalAddress", "LegalAddress", b1 =>
                        {
                            b1.Property<int>("PartyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PartyId");

                            b1.ToTable("Parties");

                            b1.WithOwner()
                                .HasForeignKey("PartyId");
                        });

                    b.OwnsOne("Merp.Registry.QueryStack.Model.PostalAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("PartyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PartyId");

                            b1.ToTable("Parties");

                            b1.WithOwner()
                                .HasForeignKey("PartyId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
